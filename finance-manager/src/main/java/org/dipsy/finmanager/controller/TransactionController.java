package org.dipsy.finmanager.controller;

import org.dipsy.finmanager.model.Transaction;
import org.dipsy.finmanager.model.TransactionType;
import org.dipsy.finmanager.service.FinanceService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class TransactionController {

    private final FinanceService financeService;

    public TransactionController() {
        this.financeService = new FinanceService();
        addTestData();
    }

    private void addTestData() {
        financeService.addTransaction(50000.0, TransactionType.INCOME, "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫—Ç—è–±—Ä—å");
        financeService.addTransaction(1500.5, TransactionType.EXPENSE, "–ï–¥–∞", "–û–±–µ–¥ –≤ –∫–∞—Ñ–µ");
        financeService.addTransaction(3000.0, TransactionType.EXPENSE, "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ");
    }


    @GetMapping("/transactions")
    public List<Transaction> getTransactions() {
        return financeService.getAllTransactions();
    }

    @GetMapping("/balance")
    public String getBalance() {
        double balance = financeService.getCurrentBalance();
        return "üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + balance + " —Ä—É–±.";
    }

    @PostMapping("/transactions")
    public ResponseEntity<String> addTransaction(@RequestParam("amount") double amount,
                                                 @RequestParam("type") String typeStr,
                                                 @RequestParam("category") String category,
                                                 @RequestParam("description") String description) {
        try {
            System.out.println("–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: " + amount + ", " + typeStr + ", " + category + ", " + description);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ TransactionType
            TransactionType type;
            try {
                type = TransactionType.valueOf(typeStr.toUpperCase());
            } catch (IllegalArgumentException e) {
                return ResponseEntity.badRequest().body("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: INCOME –∏–ª–∏ EXPENSE");
            }

            financeService.addTransaction(amount, type, category, description);
            return ResponseEntity.ok("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
        } catch (NumberFormatException e) {
            return ResponseEntity.badRequest().body("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã: " + amount);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    @DeleteMapping("/reset")
    public ResponseEntity<String> resetTransactions() {
        try {
            // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ reset –≤ FinanceService
            financeService.resetTransactions();
            return ResponseEntity.ok("‚úÖ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã!");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: " + e.getMessage());
        }
    }
}