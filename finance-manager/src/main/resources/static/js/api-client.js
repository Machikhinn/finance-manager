// js/api-client.js
export class ApiClient {
    constructor() {
        this.baseURL = window.location.origin;
    }

    async request(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        const config = {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            },
            ...options
        };

        try {
            const response = await fetch(url, config);
            console.log(`üì° Response status: ${response.status} for ${endpoint}`);

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            const responseText = await response.text();
            console.log(`üì° Response text: ${responseText}`);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${responseText}`);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
            try {
                return JSON.parse(responseText);
            } catch (e) {
                return responseText; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON
            }
        } catch (error) {
            console.error(`API Error [${endpoint}]:`, error);
            throw error;
        }
    }

    async getTransactions() {
        const result = await this.request('/transactions');
        // –î–ª—è GET /transactions –≤—Å–µ–≥–¥–∞ –æ–∂–∏–¥–∞–µ–º JSON —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        if (typeof result === 'string') {
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ JSON');
        }
        return result;
    }

    async addTransaction(data) {
        const params = new URLSearchParams(data);
        const result = await this.request('/transactions', {
            method: 'POST',
            body: params
        });

        // –î–ª—è POST –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ JSON, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç
        return result;
    }

    async resetTransactions() {
        const result = await this.request('/reset', {
            method: 'DELETE'
        });

        // –î–ª—è DELETE –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ JSON, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç
        return result;
    }
}